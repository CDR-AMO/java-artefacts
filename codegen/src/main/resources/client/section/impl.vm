#include("java-common/header.vm")
package $packageName;

import ${modelPackage}.*;
import ${basePackageName}.*;

import com.google.gson.reflect.TypeToken;
import okhttp3.Call;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import ch.qos.logback.classic.Logger;
import org.slf4j.LoggerFactory;

public class $interfaceName {
    private ApiClient localVarApiClient;
    
    private static final Logger LOG = (Logger) LoggerFactory.getLogger(${interfaceName}.class);

    public ${interfaceName}() {
        this(Configuration.getDefaultApiClient());
    }

    public ${interfaceName}(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

#foreach($endpoint in $cds.getEndpointModels())
    #parse("common/endpointdefinition.vm")

    /**
     * Build call for ${endpointOperationId}
#foreach($oneParam in $endpoint.getPathParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description()
#end
#foreach($oneParam in $endpoint.getQueryParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description()
#end
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call ${endpointOperationId}Call(
#foreach($oneParam in $endpoint.getPathParams())
                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName(),
#end
#foreach($oneParam in $endpoint.getQueryParams())
                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName(),
#end
                                          final ApiCallback<$endpointDefaultResponse> _callback) throws ApiException {

        Object localVarPostBody = new Object();
        String localVarPath = "$endpointPath";
#foreach($oneParam in $endpoint.getPathParams())
        localVarPath = localVarPath.replaceAll("\\{" + "$oneParam.getName()" + "\\}", localVarApiClient.escapeString(${oneParam.getName()}.toString()));
#end        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
#foreach($oneParam in $endpoint.getQueryParams())
        addQueryParam(localVarQueryParams, "$oneParam.getName()", $oneParam.getCamelCaseName());
#end

        LOG.trace("Building Call for ${endpointOperationId} with path: {},#foreach($oneParam in $endpoint.getParamModels()) $oneParam.getName(): {}#if( $foreach.hasNext ),#end#end",
                localVarPath, #foreach($oneParam in $endpoint.getParamModels())$oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end#end);

        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        return buildCall(_callback, "$endpointMethod", localVarPostBody, localVarPath, localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams);
    }

    private okhttp3.Call ${endpointOperationId}ValidateBeforeCall(
#foreach($oneParam in $endpoint.getPathParams())
                                                       $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName(),
#end
#foreach($oneParam in $endpoint.getQueryParams())
                                                       $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName(),
#end
                                                       final ApiCallback<$endpointDefaultResponse> _callback) throws ApiException {

#foreach($oneParam in $endpoint.getPathParams())
        // verify the required parameter '$oneParam.getCamelCaseName()' is set
        if ($oneParam.getCamelCaseName() == null) {
            throw new ApiException("Missing the required parameter '$oneParam.getCamelCaseName()' when calling ${endpointOperationId}(Async)");
        }#end

        return ${endpointOperationId}Call(#foreach($oneParam in $endpoint.getPathParams())$oneParam.getCamelCaseName(), #end#foreach($oneParam in $endpoint.getQueryParams())$oneParam.getCamelCaseName(), #end _callback);
    }
    
    /**
     * $endpointSummary
     * #if($endpointDescription)
     * $WordUtils.wrap($endpointDescription, 100, "
     * ", false)
     * #end
#foreach($oneParam in $endpoint.getPathParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description() (required)
#end
#foreach($oneParam in $endpoint.getQueryParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description()
#end
     * @return $endpointDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */    
    public $endpointDefaultResponse ${endpointOperationId} (
#foreach($oneParam in $endpoint.getPathParams())
                                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end
#end
#if($endpoint.getPathParams() and $endpoint.getPathParams().size() > 0 and $endpoint.getQueryParams() and $endpoint.getQueryParams().size() > 0),#end
#foreach($oneParam in $endpoint.getQueryParams())
                                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end
#end
                                                          ) throws ApiException {
                                                          
        LOG.trace("${endpointSummary} with #foreach($oneParam in $endpoint.getParamModels()) $oneParam.getName(): {}#if( $foreach.hasNext ),#end#end",
                #foreach($oneParam in $endpoint.getParamModels())$oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end#end);
                                                          
        ApiResponse<$endpointDefaultResponse> localVarResp = ${endpointOperationId}WithHttpInfo(
#foreach($oneParam in $endpoint.getPathParams())
                                          $oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end
#end
#if($endpoint.getPathParams() and $endpoint.getPathParams().size() > 0 and $endpoint.getQueryParams() and $endpoint.getQueryParams().size() > 0),#end
#foreach($oneParam in $endpoint.getQueryParams())
                                          $oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end
#end
                                         );
        return localVarResp.getData();
    }

    /**
     * $endpointSummary
     * #if($endpointDescription)
     * $WordUtils.wrap($endpointDescription, 100, "
     * ", false)
     * #end
#foreach($oneParam in $endpoint.getPathParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description() (required)
#end
#foreach($oneParam in $endpoint.getQueryParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description()
#end
     * @return ApiResponse&lt;$endpointDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<$endpointDefaultResponse> ${endpointOperationId}WithHttpInfo (
#foreach($oneParam in $endpoint.getPathParams())
                                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end
#end
#if($endpoint.getPathParams() and $endpoint.getPathParams().size() > 0 and $endpoint.getQueryParams() and $endpoint.getQueryParams().size() > 0),#end
#foreach($oneParam in $endpoint.getQueryParams())
                                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end
#end
    ) throws ApiException {
    
        LOG.trace("Preparing ${endpointSummary} with HTTP Information using inputs of #foreach($oneParam in $endpoint.getParamModels()) $oneParam.getName(): {}#if( $foreach.hasNext ),#end#end",
                #foreach($oneParam in $endpoint.getParamModels())$oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end#end);
    
        okhttp3.Call localVarCall = ${endpointOperationId}ValidateBeforeCall(#foreach($oneParam in $endpoint.getPathParams())$oneParam.getCamelCaseName(), #end#foreach($oneParam in $endpoint.getQueryParams())$oneParam.getCamelCaseName(), #end null);
        Type localVarReturnType = new TypeToken<$endpointDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * $endpointSummary (asynchronously)
     * #if($endpointDescription)
     * $WordUtils.wrap($endpointDescription, 100, "
     * ", false)
     * #end
    #foreach($oneParam in $endpoint.getPathParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description() (required)
    #end
    #foreach($oneParam in $endpoint.getQueryParams())
     * @param $StringUtils.rightPad($oneParam.getCamelCaseName(), 25) $oneParam.getParam().description()
    #end
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call ${endpointOperationId}Async (
#foreach($oneParam in $endpoint.getPathParams())
                                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName(),
#end
#foreach($oneParam in $endpoint.getQueryParams())
                                                          $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName(),
#end
                                                          final ApiCallback<$endpointDefaultResponse> _callback) throws ApiException {  
                                                          
        LOG.trace("Asynchronouse ${endpointSummary} call using inputs of #foreach($oneParam in $endpoint.getParamModels()) $oneParam.getName(): {}#if( $foreach.hasNext ),#end#end",
                #foreach($oneParam in $endpoint.getParamModels())$oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end#end);
     
        okhttp3.Call localVarCall = ${endpointOperationId}ValidateBeforeCall(#foreach($oneParam in $endpoint.getPathParams())$oneParam.getCamelCaseName(), #end#foreach($oneParam in $endpoint.getQueryParams())$oneParam.getCamelCaseName(), #end _callback);    
        Type localVarReturnType = new TypeToken<$endpointDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

#end
    
    private Call buildCall(ApiCallback<?> _callback,
                           String httpMethod,
                           Object localVarPostBody,
                           String localVarPath,
                           List<Pair> localVarQueryParams,
                           List<Pair> localVarCollectionQueryParams,
                           Map<String, String> localVarHeaderParams) throws ApiException {
                           
        LOG.trace("Generic buildCall requested with http method: {}, post body: {}, var path: {}, query params: {}, collection query params: {}, header params: {}",
            httpMethod, localVarPostBody, localVarPath, localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams);                           

        localVarHeaderParams.put("Accept", "application/json");
        localVarHeaderParams.put("Content-Type", "application/json");
        Map<String, Object> localVarFormParams = new HashMap<>();
        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, httpMethod, localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    private void addQueryParam(List<Pair> localVarQueryParams, String paramName,  Object paramValue) {
        if (paramValue != null) {
            LOG.trace("Adding query parameter of {} with value of {}", paramName, paramValue);
            localVarQueryParams.addAll(localVarApiClient.parameterToPair(paramName, paramValue));
        }
    }    

}
