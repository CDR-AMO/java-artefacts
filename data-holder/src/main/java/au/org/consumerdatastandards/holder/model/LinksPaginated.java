/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;




/**
* LinksPaginated
* 
* 
*/
public class LinksPaginated  {
    // Fully qualified link to this API call
    @JsonProperty("self")
    private URI self;
    // URI to the first page of this set. Mandatory if this
    // response is not the first page
    @JsonProperty("first")
    private URI first;
    // URI to the previous page of this set. Mandatory if this
    // response is not the first page
    @JsonProperty("prev")
    private URI prev;
    // URI to the next page of this set. Mandatory if this response
    // is not the last page
    @JsonProperty("next")
    private URI next;
    // URI to the last page of this set. Mandatory if this response
    // is not the last page
    @JsonProperty("last")
    private URI last;

    
    public URI getSelf() {
        return self;
    }

    public void setSelf(URI self) {
        this.self = self;
    }
    
    public URI getFirst() {
        return first;
    }

    public void setFirst(URI first) {
        this.first = first;
    }
    
    public URI getPrev() {
        return prev;
    }

    public void setPrev(URI prev) {
        this.prev = prev;
    }
    
    public URI getNext() {
        return next;
    }

    public void setNext(URI next) {
        this.next = next;
    }
    
    public URI getLast() {
        return last;
    }

    public void setLast(URI last) {
        this.last = last;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        
        LinksPaginated inputModel = (LinksPaginated) o;
        if(! (self.equals(inputModel.getSelf()))) { return false; }
        if(! (first.equals(inputModel.getFirst()))) { return false; }
        if(! (prev.equals(inputModel.getPrev()))) { return false; }
        if(! (next.equals(inputModel.getNext()))) { return false; }
        if(! (last.equals(inputModel.getLast()))) { return false; }
        return true;
    }

    @Override
    public int hashCode() {
      return Objects.hash(last,last,last,last,last);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }


}
