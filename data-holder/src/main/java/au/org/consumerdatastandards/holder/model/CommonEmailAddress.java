/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import org.hibernate.annotations.GenericGenerator;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.persistence.*;
import java.util.Objects;
import java.lang.reflect.Field;

/**
 * CommonEmailAddress
 * 
 * 
 */
@Entity
public class CommonEmailAddress {
    @Id
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid2")
    private String emailAddressId;

    @ManyToOne
    private CommonPersonDetail commonPersonDetail;

    // Required for one and only one email record in the
    // collection. Denotes the default email address
    @JsonProperty("isPreferred")
    private Boolean isPreferred;
    // The purpose for the email, as specified by the customer
    // (Enumeration)
    @JsonProperty("purpose")
    private Purpose purpose;
    // A correctly formatted email address, as defined by the
    // addr_spec format in [RFC
    // 5322](https://www.ietf.org/rfc/rfc5322.txt)
    @JsonProperty("address")
    private String address;

    public Boolean getIsPreferred() {
        return isPreferred;
    }

    public void setIsPreferred(Boolean isPreferred) {
        this.isPreferred = isPreferred;
    }

    public Purpose getPurpose() {
        return purpose;
    }

    public void setPurpose(Purpose purpose) {
        this.purpose = purpose;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CommonEmailAddress inputModel = (CommonEmailAddress) o;
        if (!(isPreferred.equals(inputModel.getIsPreferred()))) {
            return false;
        }
        if (!(purpose.equals(inputModel.getPurpose()))) {
            return false;
        }
        if (!(address.equals(inputModel.getAddress()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(address, address, address);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

    /**
     * Purpose
     * 
     * 
     */
    public enum Purpose {
        WORK("WORK"), HOME("HOME"), OTHER("OTHER"), UNSPECIFIED("UNSPECIFIED");

        private String value;

        Purpose(String value) {
            this.value = value;
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static Purpose fromValue(String value) {
            for (Purpose b : Purpose.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

}
