/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the cds-codegen package
 * https://github.com/ConsumerDataStandardsAustralia/cds-codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import io.swagger.annotations.ApiModelProperty;

import javax.persistence.CascadeType;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.MapsId;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.GenericGenerator;

import java.time.OffsetDateTime;
import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;
import java.util.List;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import au.org.consumerdatastandards.holder.model.CommonPhysicalAddress.AddressUType;

/** CommonPhysicalAddressWithPurpose */
@Entity
@Table(name = "CommonPhysicalAddress")
public class CommonPhysicalAddressWithPurpose {
    @Id
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid2")
    private String physicalAddressId;
    
    // The type of address object present
    @JsonProperty("addressUType")
    private AddressUType addressUType;
    
    @JsonProperty("simple")
    @OneToOne
    private CommonSimpleAddress simple = null;
    @JsonProperty("paf")
    @OneToOne
    private CommonPAFAddress paf = null;

    // Enumeration of values indicating the purpose of the physical
    // address
    @JsonProperty("purpose")
    private Purpose purpose;

    public AddressUType getAddressUType() {
        return addressUType;
    }

    public void setAddressUType(AddressUType addressUType) {
        this.addressUType = addressUType;
    }

    public CommonSimpleAddress getSimple() {
        return simple;
    }

    public void setSimple(CommonSimpleAddress simple) {
        this.simple = simple;
    }

    public CommonPAFAddress getPaf() {
        return paf;
    }

    public void setPaf(CommonPAFAddress paf) {
        this.paf = paf;
    }

    public Purpose getPurpose() {
        return purpose;
    }

    public void setPurpose(Purpose purpose) {
        this.purpose = purpose;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CommonPhysicalAddressWithPurpose inputModel = (CommonPhysicalAddressWithPurpose) o;
        if (!(addressUType.equals(inputModel.getAddressUType()))) {
            return false;
        }
        if (!(simple.equals(inputModel.getSimple()))) {
            return false;
        }
        if (!(paf.equals(inputModel.getPaf()))) {
            return false;
        }
        if (!(purpose.equals(inputModel.getPurpose()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(addressUType, simple, paf, purpose);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

    /** Purpose */
    public enum Purpose {
        REGISTERED("REGISTERED"), MAIL("MAIL"), PHYSICAL("PHYSICAL"), WORK("WORK"), OTHER("OTHER");

        private String value;

        Purpose(String value) {
            this.value = value;
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static Purpose fromValue(String value) {
            for (Purpose b : Purpose.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
}
