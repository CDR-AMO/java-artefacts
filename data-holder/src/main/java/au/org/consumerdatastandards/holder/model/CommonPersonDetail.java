/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the cds-codegen package
 * https://github.com/ConsumerDataStandardsAustralia/cds-codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.*;
import javax.validation.Valid;
import java.util.Objects;
import java.lang.reflect.Field;
import java.util.List;

/**
 * CommonPersonDetail
 * 
 * 
 */
@Entity
public class CommonPersonDetail extends CommonPerson {

    // Array is mandatory but may be empty if no phone numbers are
    // held
    @JsonProperty("phoneNumbers")
    @Valid
    @OneToMany
    private List<CommonPhoneNumber> phoneNumbers;
    // May be empty
    @JsonProperty("emailAddresses")
    @Valid
    @OneToMany
    private List<CommonEmailAddress> emailAddresses;
    // Must contain at least one address. One and only one address
    // may have the purpose of REGISTERED. Zero or one, and no more
    // than one, record may have the purpose of MAIL. If zero then
    // the REGISTERED address is to be used for mail
    @JsonProperty("physicalAddresses")
    @Valid
    @OneToMany
    private List<CommonPhysicalAddressWithPurpose> physicalAddresses;

    public List<CommonPhoneNumber> getPhoneNumbers() {
        return phoneNumbers;
    }

    public void setPhoneNumbers(List<CommonPhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
    }

    public List<CommonEmailAddress> getEmailAddresses() {
        return emailAddresses;
    }

    public void setEmailAddresses(List<CommonEmailAddress> emailAddresses) {
        this.emailAddresses = emailAddresses;
    }

    public List<CommonPhysicalAddressWithPurpose> getPhysicalAddresses() {
        return physicalAddresses;
    }

    public void setPhysicalAddresses(List<CommonPhysicalAddressWithPurpose> physicalAddresses) {
        this.physicalAddresses = physicalAddresses;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        if (!super.equals(o)) {
            return false;
        }
        CommonPersonDetail inputModel = (CommonPersonDetail) o;
        if (!(phoneNumbers.equals(inputModel.getPhoneNumbers()))) {
            return false;
        }
        if (!(emailAddresses.equals(inputModel.getEmailAddresses()))) {
            return false;
        }
        if (!(physicalAddresses.equals(inputModel.getPhysicalAddresses()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(physicalAddresses, physicalAddresses, physicalAddresses);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

}
