/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import org.hibernate.annotations.GenericGenerator;
import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.*;
import java.util.Objects;
import java.lang.reflect.Field;

/**
 * CommonSimpleAddress
 * 
 * 
 */
@Entity
public class CommonSimpleAddress {
    @Id
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid2")
    private String commonSimpleAddressId;
    
    @OneToOne
    @MapsId
    private CommonPhysicalAddress physicalAddress;

    @OneToOne
    @MapsId
    private CommonPhysicalAddressWithPurpose physicalAddressWithPurpose;    
    
    // Name of the individual or business formatted for inclusion
    // in an address used for physical mail
    @JsonProperty("mailingName")
    private String mailingName;
    // First line of the standard address object
    @JsonProperty("addressLine1")
    private String addressLine1;
    // Second line of the standard address object
    @JsonProperty("addressLine2")
    private String addressLine2;
    // Third line of the standard address object
    @JsonProperty("addressLine3")
    private String addressLine3;
    // Mandatory for Australian addresses
    @JsonProperty("postcode")
    private String postcode;
    // Name of the city or locality
    @JsonProperty("city")
    private String city;
    // Free text if the country is not Australia. If country is
    // Australia then must be one of the values defined by the [ISO
    // 3166:AU
    // standard](https://www.iso.org/obp/ui/#iso:code:3166:AU)
    @JsonProperty("state")
    private String state;
    // A valid [ISO 3166
    // Alpha-3](https://www.iso.org/iso-3166-country-codes.html)
    // country code
    @JsonProperty("country")
    private String country;

    public String getMailingName() {
        return mailingName;
    }

    public void setMailingName(String mailingName) {
        this.mailingName = mailingName;
    }

    public String getAddressLine1() {
        return addressLine1;
    }

    public void setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
    }

    public String getAddressLine2() {
        return addressLine2;
    }

    public void setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
    }

    public String getAddressLine3() {
        return addressLine3;
    }

    public void setAddressLine3(String addressLine3) {
        this.addressLine3 = addressLine3;
    }

    public String getPostcode() {
        return postcode;
    }

    public void setPostcode(String postcode) {
        this.postcode = postcode;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CommonSimpleAddress inputModel = (CommonSimpleAddress) o;
        if (!(mailingName.equals(inputModel.getMailingName()))) {
            return false;
        }
        if (!(addressLine1.equals(inputModel.getAddressLine1()))) {
            return false;
        }
        if (!(addressLine2.equals(inputModel.getAddressLine2()))) {
            return false;
        }
        if (!(addressLine3.equals(inputModel.getAddressLine3()))) {
            return false;
        }
        if (!(postcode.equals(inputModel.getPostcode()))) {
            return false;
        }
        if (!(city.equals(inputModel.getCity()))) {
            return false;
        }
        if (!(state.equals(inputModel.getState()))) {
            return false;
        }
        if (!(country.equals(inputModel.getCountry()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(country, country, country, country, country, country, country, country);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

}
