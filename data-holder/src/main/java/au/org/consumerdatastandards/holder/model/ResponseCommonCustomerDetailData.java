/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Objects;
import java.lang.reflect.Field;




/**
* ResponseCommonCustomerDetailData
* 
* 
*/
public class ResponseCommonCustomerDetailData  {
    // The type of customer object that is present
    @JsonProperty("customerUType")
    private CustomerUType customerUType;
    @JsonProperty("person")
    private CommonPersonDetail person;
    @JsonProperty("organisation")
    private CommonOrganisationDetail organisation;

    
    public CustomerUType getCustomerUType() {
        return customerUType;
    }

    public void setCustomerUType(CustomerUType customerUType) {
        this.customerUType = customerUType;
    }
    
    public CommonPersonDetail getPerson() {
        return person;
    }

    public void setPerson(CommonPersonDetail person) {
        this.person = person;
    }
    
    public CommonOrganisationDetail getOrganisation() {
        return organisation;
    }

    public void setOrganisation(CommonOrganisationDetail organisation) {
        this.organisation = organisation;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        
        ResponseCommonCustomerDetailData inputModel = (ResponseCommonCustomerDetailData) o;
        if(! (customerUType.equals(inputModel.getCustomerUType()))) { return false; }
        if(! (person.equals(inputModel.getPerson()))) { return false; }
        if(! (organisation.equals(inputModel.getOrganisation()))) { return false; }
        return true;
    }

    @Override
    public int hashCode() {
      return Objects.hash(organisation,organisation,organisation);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

/**
* CustomerUType
* 
* 
*/
public enum CustomerUType {
    PERSON("PERSON"),
    ORGANISATION("ORGANISATION");
    
    private String value;
    
    CustomerUType(String value) {
      this.value = value;
    }
    
    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CustomerUType fromValue(String value) {
      for (CustomerUType b : CustomerUType.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
}




}
