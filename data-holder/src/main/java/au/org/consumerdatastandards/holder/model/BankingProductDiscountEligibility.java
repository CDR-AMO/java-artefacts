/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the cds-codegen package
 * https://github.com/ConsumerDataStandardsAustralia/cds-codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.persistence.*;
import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;

/**
 * BankingProductDiscountEligibility
 * 
 * 
 */
@Entity
public class BankingProductDiscountEligibility {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer productDsicountElegibilityId;

    // The type of the specific eligibility constraint for a
    // discount
    @JsonProperty("discountEligibilityType")
    private DiscountEligibilityType discountEligibilityType;
    // Generic field containing additional information relevant to
    // the discountEligibilityType specified. Whether mandatory or
    // not is dependent on the value of discountEligibilityType
    @JsonProperty("additionalValue")
    @Column(length = 2048)
    private String additionalValue;
    // Display text providing more information on this eligibility
    // constraint
    @JsonProperty("additionalInfo")
    @Column(length = 2048)
    private String additionalInfo;
    // Link to a web page with more information on this eligibility
    // constraint
    @JsonProperty("additionalInfoUri")
    private URI additionalInfoUri;

    public DiscountEligibilityType getDiscountEligibilityType() {
        return discountEligibilityType;
    }

    public void setDiscountEligibilityType(DiscountEligibilityType discountEligibilityType) {
        this.discountEligibilityType = discountEligibilityType;
    }

    public String getAdditionalValue() {
        return additionalValue;
    }

    public void setAdditionalValue(String additionalValue) {
        this.additionalValue = additionalValue;
    }

    public String getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(String additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public URI getAdditionalInfoUri() {
        return additionalInfoUri;
    }

    public void setAdditionalInfoUri(URI additionalInfoUri) {
        this.additionalInfoUri = additionalInfoUri;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BankingProductDiscountEligibility inputModel = (BankingProductDiscountEligibility) o;
        if (!(discountEligibilityType.equals(inputModel.getDiscountEligibilityType()))) {
            return false;
        }
        if (!(additionalValue.equals(inputModel.getAdditionalValue()))) {
            return false;
        }
        if (!(additionalInfo.equals(inputModel.getAdditionalInfo()))) {
            return false;
        }
        if (!(additionalInfoUri.equals(inputModel.getAdditionalInfoUri()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(additionalInfoUri, additionalInfoUri, additionalInfoUri, additionalInfoUri);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

    /**
     * DiscountEligibilityType
     * 
     * 
     */
    public enum DiscountEligibilityType {
        BUSINESS("BUSINESS"), PENSION_RECIPIENT("PENSION_RECIPIENT"), MIN_AGE("MIN_AGE"), MAX_AGE("MAX_AGE"),
        MIN_INCOME("MIN_INCOME"), MIN_TURNOVER("MIN_TURNOVER"), STAFF("STAFF"), STUDENT("STUDENT"),
        EMPLOYMENT_STATUS("EMPLOYMENT_STATUS"), RESIDENCY_STATUS("RESIDENCY_STATUS"), NATURAL_PERSON("NATURAL_PERSON"),
        INTRODUCTORY("INTRODUCTORY"), OTHER("OTHER");

        private String value;

        DiscountEligibilityType(String value) {
            this.value = value;
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static DiscountEligibilityType fromValue(String value) {
            for (DiscountEligibilityType b : DiscountEligibilityType.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

}
