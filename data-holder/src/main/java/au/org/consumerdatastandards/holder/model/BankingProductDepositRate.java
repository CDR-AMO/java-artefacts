/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.persistence.*;
import javax.validation.Valid;
import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;
import java.util.List;
import java.math.BigDecimal;

@Entity
public class BankingProductDepositRate {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer productDepositRateId;

    // The type of rate (base, bonus, etc). See the next section
    // for an overview of valid values and their meaning
    @JsonProperty("depositRateType")
    private DepositRateType depositRateType;

    // The rate to be applied
    @JsonProperty("rate")
    private BigDecimal rate;

    // The period after which the rate is applied to the balance to
    // calculate the amount due for the period. Calculation of the
    // amount is often daily (as balances may change) but
    // accumulated until the total amount is 'applied' to the
    // account (see applicationFrequency). Formatted according to
    // [ISO 8601
    // Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
    @JsonProperty("calculationFrequency")
    private String calculationFrequency;

    // The period after which the calculated amount(s) (see
    // calculationFrequency) are 'applied' (i.e. debited or
    // credited) to the account. Formatted according to [ISO 8601
    // Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
    @JsonProperty("applicationFrequency")
    private String applicationFrequency;

    // Rate tiers applicable for this rate
    @OneToMany(mappedBy = "depositRate")
    @JsonProperty("tiers")
    @Valid
    private List<BankingProductRateTier> tiers;

    // Generic field containing additional information relevant to
    // the depositRateType specified. Whether mandatory or not is
    // dependent on the value of depositRateType
    @JsonProperty("additionalValue")
    @Column(length = 2048)
    private String additionalValue;

    // Display text providing more information on the rate
    @JsonProperty("additionalInfo")
    @Column(length = 2048)
    private String additionalInfo;

    // Link to a web page with more information on this rate
    @JsonProperty("additionalInfoUri")
    private URI additionalInfoUri;

    public DepositRateType getDepositRateType() {
        return depositRateType;
    }

    public void setDepositRateType(DepositRateType depositRateType) {
        this.depositRateType = depositRateType;
    }

    public BigDecimal getRate() {
        return rate;
    }

    public void setRate(BigDecimal rate) {
        this.rate = rate;
    }

    public String getCalculationFrequency() {
        return calculationFrequency;
    }

    public void setCalculationFrequency(String calculationFrequency) {
        this.calculationFrequency = calculationFrequency;
    }

    public String getApplicationFrequency() {
        return applicationFrequency;
    }

    public void setApplicationFrequency(String applicationFrequency) {
        this.applicationFrequency = applicationFrequency;
    }

    public List<BankingProductRateTier> getTiers() {
        return tiers;
    }

    public void setTiers(List<BankingProductRateTier> tiers) {
        this.tiers = tiers;
    }

    public String getAdditionalValue() {
        return additionalValue;
    }

    public void setAdditionalValue(String additionalValue) {
        this.additionalValue = additionalValue;
    }

    public String getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(String additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public URI getAdditionalInfoUri() {
        return additionalInfoUri;
    }

    public void setAdditionalInfoUri(URI additionalInfoUri) {
        this.additionalInfoUri = additionalInfoUri;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BankingProductDepositRate inputModel = (BankingProductDepositRate) o;
        if (!(depositRateType.equals(inputModel.getDepositRateType()))) {
            return false;
        }
        if (!(rate.equals(inputModel.getRate()))) {
            return false;
        }
        if (!(calculationFrequency.equals(inputModel.getCalculationFrequency()))) {
            return false;
        }
        if (!(applicationFrequency.equals(inputModel.getApplicationFrequency()))) {
            return false;
        }
        if (!(tiers.equals(inputModel.getTiers()))) {
            return false;
        }
        if (!(additionalValue.equals(inputModel.getAdditionalValue()))) {
            return false;
        }
        if (!(additionalInfo.equals(inputModel.getAdditionalInfo()))) {
            return false;
        }
        return additionalInfoUri.equals(inputModel.getAdditionalInfoUri());
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            productDepositRateId,
            depositRateType,
            rate,
            calculationFrequency,
            applicationFrequency,
            tiers,
            additionalValue,
            additionalInfo,
            additionalInfoUri);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

    public enum DepositRateType {
        FIXED,
        BONUS,
        BUNDLE_BONUS,
        VARIABLE,
        INTRODUCTORY,
        FLOATING,
        MARKET_LINKED
    }
}
