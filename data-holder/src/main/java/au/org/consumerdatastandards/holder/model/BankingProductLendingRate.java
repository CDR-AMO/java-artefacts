/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.persistence.*;
import javax.validation.Valid;
import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;
import java.util.List;
import java.math.BigDecimal;

/**
 * BankingProductLendingRate
 * 
 * 
 */
@Entity
public class BankingProductLendingRate {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer productLendingRateId;

    // The type of rate (fixed, variable, etc). See the next
    // section for an overview of valid values and their meaning
    @JsonProperty("lendingRateType")
    private LendingRateType lendingRateType;
    // The rate to be applied
    @JsonProperty("rate")
    private BigDecimal rate;
    // A comparison rate equivalent for this rate
    @JsonProperty("comparisonRate")
    private BigDecimal comparisonRate;
    // The period after which the rate is applied to the balance to
    // calculate the amount due for the period. Calculation of the
    // amount is often daily (as balances may change) but
    // accumulated until the total amount is 'applied' to the
    // account (see applicationFrequency). Formatted according to
    // [ISO 8601
    // Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
    @JsonProperty("calculationFrequency")
    private String calculationFrequency;
    // The period after which the calculated amount(s) (see
    // calculationFrequency) are 'applied' (i.e. debited or
    // credited) to the account. Formatted according to [ISO 8601
    // Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
    @JsonProperty("applicationFrequency")
    private String applicationFrequency;
    // When loan payments are due to be paid within each period.
    // The investment benefit of earlier payments affect the rate
    // that can be offered
    @JsonProperty("interestPaymentDue")
    private InterestPaymentDue interestPaymentDue;
    // Rate tiers applicable for this rate
    @OneToMany(mappedBy = "lendingRate")
    @JsonProperty("tiers")
    @Valid
    private List<BankingProductRateTier> tiers = null;
    // Generic field containing additional information relevant to
    // the lendingRateType specified. Whether mandatory or not is
    // dependent on the value of lendingRateType
    @JsonProperty("additionalValue")
    @Column(length = 2048)
    private String additionalValue;
    // Display text providing more information on the rate.
    @JsonProperty("additionalInfo")
    @Column(length = 2048)
    private String additionalInfo;
    // Link to a web page with more information on this rate
    @JsonProperty("additionalInfoUri")
    private URI additionalInfoUri;

    public LendingRateType getLendingRateType() {
        return lendingRateType;
    }

    public void setLendingRateType(LendingRateType lendingRateType) {
        this.lendingRateType = lendingRateType;
    }

    public BigDecimal getRate() {
        return rate;
    }

    public void setRate(BigDecimal rate) {
        this.rate = rate;
    }

    public BigDecimal getComparisonRate() {
        return comparisonRate;
    }

    public void setComparisonRate(BigDecimal comparisonRate) {
        this.comparisonRate = comparisonRate;
    }

    public String getCalculationFrequency() {
        return calculationFrequency;
    }

    public void setCalculationFrequency(String calculationFrequency) {
        this.calculationFrequency = calculationFrequency;
    }

    public String getApplicationFrequency() {
        return applicationFrequency;
    }

    public void setApplicationFrequency(String applicationFrequency) {
        this.applicationFrequency = applicationFrequency;
    }

    public InterestPaymentDue getInterestPaymentDue() {
        return interestPaymentDue;
    }

    public void setInterestPaymentDue(InterestPaymentDue interestPaymentDue) {
        this.interestPaymentDue = interestPaymentDue;
    }

    public List<BankingProductRateTier> getTiers() {
        return tiers;
    }

    public void setTiers(List<BankingProductRateTier> tiers) {
        this.tiers = tiers;
    }

    public String getAdditionalValue() {
        return additionalValue;
    }

    public void setAdditionalValue(String additionalValue) {
        this.additionalValue = additionalValue;
    }

    public String getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(String additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public URI getAdditionalInfoUri() {
        return additionalInfoUri;
    }

    public void setAdditionalInfoUri(URI additionalInfoUri) {
        this.additionalInfoUri = additionalInfoUri;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BankingProductLendingRate inputModel = (BankingProductLendingRate) o;
        if (!(lendingRateType.equals(inputModel.getLendingRateType()))) {
            return false;
        }
        if (!(rate.equals(inputModel.getRate()))) {
            return false;
        }
        if (!(comparisonRate.equals(inputModel.getComparisonRate()))) {
            return false;
        }
        if (!(calculationFrequency.equals(inputModel.getCalculationFrequency()))) {
            return false;
        }
        if (!(applicationFrequency.equals(inputModel.getApplicationFrequency()))) {
            return false;
        }
        if (!(interestPaymentDue.equals(inputModel.getInterestPaymentDue()))) {
            return false;
        }
        if (!(tiers.equals(inputModel.getTiers()))) {
            return false;
        }
        if (!(additionalValue.equals(inputModel.getAdditionalValue()))) {
            return false;
        }
        if (!(additionalInfo.equals(inputModel.getAdditionalInfo()))) {
            return false;
        }
        if (!(additionalInfoUri.equals(inputModel.getAdditionalInfoUri()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(additionalInfoUri, additionalInfoUri, additionalInfoUri, additionalInfoUri,
                additionalInfoUri, additionalInfoUri, additionalInfoUri, additionalInfoUri, additionalInfoUri,
                additionalInfoUri);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

    /**
     * InterestPaymentDue
     * 
     * 
     */
    public enum InterestPaymentDue {
        ARREARS("ARREARS"), ADVANCE("ADVANCE");

        private String value;

        InterestPaymentDue(String value) {
            this.value = value;
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static InterestPaymentDue fromValue(String value) {
            for (InterestPaymentDue b : InterestPaymentDue.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    /**
     * LendingRateType
     * 
     * 
     */
    public enum LendingRateType {
        FIXED("FIXED"), VARIABLE("VARIABLE"), INTRODUCTORY("INTRODUCTORY"), DISCOUNT("DISCOUNT"), PENALTY("PENALTY"),
        FLOATING("FLOATING"), MARKET_LINKED("MARKET_LINKED"), CASH_ADVANCE("CASH_ADVANCE"), PURCHASE("PURCHASE"),
        BUNDLE_DISCOUNT_FIXED("BUNDLE_DISCOUNT_FIXED"), BUNDLE_DISCOUNT_VARIABLE("BUNDLE_DISCOUNT_VARIABLE");

        private String value;

        LendingRateType(String value) {
            this.value = value;
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static LendingRateType fromValue(String value) {
            for (LendingRateType b : LendingRateType.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

}
