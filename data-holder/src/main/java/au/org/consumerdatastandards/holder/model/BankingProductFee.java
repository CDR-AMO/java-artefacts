/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the cds-codegen package
 * https://github.com/ConsumerDataStandardsAustralia/cds-codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.persistence.*;
import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;
import java.util.List;
import java.math.BigDecimal;

/**
 * BankingProductFee
 * 
 * 
 */
@Entity
public class BankingProductFee {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer productFeatureId;

    // Name of the fee
    @JsonProperty("name")
    private String name;
    // The type of fee
    @JsonProperty("feeType")
    private FeeType feeType;
    // The amount charged for the fee. One of amount, balanceRate,
    // transactionRate and accruedRate is mandatory
    @JsonProperty("amount")
    private BigDecimal amount;
    // A fee rate calculated based on a proportion of the balance.
    // One of amount, balanceRate, transactionRate and accruedRate
    // is mandatory
    @JsonProperty("balanceRate")
    private BigDecimal balanceRate;
    // A fee rate calculated based on a proportion of a
    // transaction. One of amount, balanceRate, transactionRate and
    // accruedRate is mandatory
    @JsonProperty("transactionRate")
    private BigDecimal transactionRate;
    // A fee rate calculated based on a proportion of the
    // calculated interest accrued on the account. One of amount,
    // balanceRate, transactionRate and accruedRate is mandatory
    @JsonProperty("accruedRate")
    private BigDecimal accruedRate;
    // The indicative frequency with which the fee is calculated on
    // the account. Only applies if balanceRate or accruedRate is
    // also present. Formatted according to [ISO 8601
    // Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
    @JsonProperty("accrualFrequency")
    private String accrualFrequency;
    // The currency the fee will be charged in. Assumes AUD if
    // absent
    @JsonProperty("currency")
    private String currency;
    // Generic field containing additional information relevant to
    // the feeType specified. Whether mandatory or not is dependent
    // on the value of feeType
    @JsonProperty("additionalValue")
    @Column(length = 2048)
    private String additionalValue;
    // Display text providing more information on the fee
    @JsonProperty("additionalInfo")
    @Column(length = 2048)
    private String additionalInfo;
    // Link to a web page with more information on this fee
    @JsonProperty("additionalInfoUri")
    private URI additionalInfoUri;
    // An optional list of discounts to this fee that may be
    // available
    @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(name = "product_fee_discounts", joinColumns = @JoinColumn(name = "product_fee_id"), inverseJoinColumns = @JoinColumn(name = "product_discount_id"))
    @JsonProperty("discounts")
    private List<BankingProductDiscount> discounts;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public FeeType getFeeType() {
        return feeType;
    }

    public void setFeeType(FeeType feeType) {
        this.feeType = feeType;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public BigDecimal getBalanceRate() {
        return balanceRate;
    }

    public void setBalanceRate(BigDecimal balanceRate) {
        this.balanceRate = balanceRate;
    }

    public BigDecimal getTransactionRate() {
        return transactionRate;
    }

    public void setTransactionRate(BigDecimal transactionRate) {
        this.transactionRate = transactionRate;
    }

    public BigDecimal getAccruedRate() {
        return accruedRate;
    }

    public void setAccruedRate(BigDecimal accruedRate) {
        this.accruedRate = accruedRate;
    }

    public String getAccrualFrequency() {
        return accrualFrequency;
    }

    public void setAccrualFrequency(String accrualFrequency) {
        this.accrualFrequency = accrualFrequency;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public String getAdditionalValue() {
        return additionalValue;
    }

    public void setAdditionalValue(String additionalValue) {
        this.additionalValue = additionalValue;
    }

    public String getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(String additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public URI getAdditionalInfoUri() {
        return additionalInfoUri;
    }

    public void setAdditionalInfoUri(URI additionalInfoUri) {
        this.additionalInfoUri = additionalInfoUri;
    }

    public List<BankingProductDiscount> getDiscounts() {
        return discounts;
    }

    public void setDiscounts(List<BankingProductDiscount> discounts) {
        this.discounts = discounts;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BankingProductFee inputModel = (BankingProductFee) o;
        if (!(name.equals(inputModel.getName()))) {
            return false;
        }
        if (!(feeType.equals(inputModel.getFeeType()))) {
            return false;
        }
        if (!(amount.equals(inputModel.getAmount()))) {
            return false;
        }
        if (!(balanceRate.equals(inputModel.getBalanceRate()))) {
            return false;
        }
        if (!(transactionRate.equals(inputModel.getTransactionRate()))) {
            return false;
        }
        if (!(accruedRate.equals(inputModel.getAccruedRate()))) {
            return false;
        }
        if (!(accrualFrequency.equals(inputModel.getAccrualFrequency()))) {
            return false;
        }
        if (!(currency.equals(inputModel.getCurrency()))) {
            return false;
        }
        if (!(additionalValue.equals(inputModel.getAdditionalValue()))) {
            return false;
        }
        if (!(additionalInfo.equals(inputModel.getAdditionalInfo()))) {
            return false;
        }
        if (!(additionalInfoUri.equals(inputModel.getAdditionalInfoUri()))) {
            return false;
        }
        if (!(discounts.equals(inputModel.getDiscounts()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(discounts, discounts, discounts, discounts, discounts, discounts, discounts, discounts,
                discounts, discounts, discounts, discounts);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }

    /**
     * FeeType
     * 
     * 
     */
    public enum FeeType {
        PERIODIC("PERIODIC"), TRANSACTION("TRANSACTION"), WITHDRAWAL("WITHDRAWAL"), DEPOSIT("DEPOSIT"),
        PAYMENT("PAYMENT"), PURCHASE("PURCHASE"), EVENT("EVENT"), UPFRONT("UPFRONT"), EXIT("EXIT");

        private String value;

        FeeType(String value) {
            this.value = value;
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FeeType fromValue(String value) {
            for (FeeType b : FeeType.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

}
