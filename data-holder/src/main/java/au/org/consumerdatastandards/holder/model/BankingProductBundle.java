/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.holder.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.validation.Valid;
import java.lang.reflect.Field;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Entity
public class BankingProductBundle {

    @Id
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid2")    
    private String bundleId;

    // Name of the bundle
    @JsonProperty("name")
    private String name;

    // Description of the bundle
    @JsonProperty("description")
    private String description;

    // Display text providing more information on the bundle
    @JsonProperty("additionalInfo")
    private String additionalInfo;

    // Link to a web page with more information on the bundle
    // criteria and benefits
    @JsonProperty("additionalInfoUri")
    private URI additionalInfoUri;

    // Array of product IDs for products included in the bundle
    @JsonProperty("productIds")
    @ElementCollection
    @Valid
    private List<String> bundleProductMembers = new ArrayList<>();
    
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(String additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public URI getAdditionalInfoUri() {
        return additionalInfoUri;
    }

    public void setAdditionalInfoUri(URI additionalInfoUri) {
        this.additionalInfoUri = additionalInfoUri;
    }


    public List<String> getProductIds() {
        return bundleProductMembers;
    }

    public void setProductIds(List<String> productIds) {
        this.bundleProductMembers = productIds;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BankingProductBundle inputModel = (BankingProductBundle) o;
        if (!(name.equals(inputModel.getName()))) {
            return false;
        }
        if (!(description.equals(inputModel.getDescription()))) {
            return false;
        }
        if (!(additionalInfo.equals(inputModel.getAdditionalInfo()))) {
            return false;
        }
        if (!(additionalInfoUri.equals(inputModel.getAdditionalInfoUri()))) {
            return false;
        }
        return bundleProductMembers.equals(inputModel.getProductIds());
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            description,
            additionalInfo,
            additionalInfoUri,
            bundleProductMembers);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }
}
