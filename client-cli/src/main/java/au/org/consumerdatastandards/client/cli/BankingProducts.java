/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the codegen artefact
 * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.client.cli;

import au.org.consumerdatastandards.client.api.BankingProductsAPI;
import au.org.consumerdatastandards.client.cli.support.ApiClientOptions;
import au.org.consumerdatastandards.client.cli.support.ApiUtil;
import au.org.consumerdatastandards.client.cli.support.JsonPrinter;
import au.org.consumerdatastandards.client.model.*;
import au.org.consumerdatastandards.conformance.ConformanceError;
import au.org.consumerdatastandards.conformance.PayloadValidator;
import au.org.consumerdatastandards.support.ResponseCode;
import com.github.freva.asciitable.AsciiTable;
import com.github.freva.asciitable.Column;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.shell.standard.ShellCommandGroup;
import org.springframework.shell.standard.ShellComponent;
import org.springframework.shell.standard.ShellMethod;
import org.springframework.shell.standard.ShellOption;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

@ShellComponent
@ShellCommandGroup("Products API")
public class BankingProducts extends ApiCliBase {

    @Autowired
    ApiClientOptions apiClientOptions;

    private static final Logger LOGGER = LoggerFactory.getLogger(BankingProducts.class);

    private PayloadValidator payloadValidator = new PayloadValidator();
    private final BankingProductsAPI api = new BankingProductsAPI();

    @ShellMethod("List Products")
    public void listProducts(@ShellOption(defaultValue = ShellOption.NULL) Boolean check,
                             @ShellOption(defaultValue = ShellOption.NULL) BankingProductsAPI.ParamEffective effective,
                             @ShellOption(defaultValue = ShellOption.NULL) OffsetDateTime updatedSince,
                             @ShellOption(defaultValue = ShellOption.NULL) String brand,
                             @ShellOption(defaultValue = ShellOption.NULL) ParamProductCategory productCategory,
                             @ShellOption(defaultValue = ShellOption.NULL) Integer page,
                             @ShellOption(defaultValue = ShellOption.NULL) Integer pageSize) throws Exception {

        LOGGER.info(
                "List Products CLI initiated with effective: {}, updated-since: {}, brand: {}, product-category: {}, page: {}, page-size: {}",
                effective, updatedSince, brand, productCategory, page, pageSize);

        if (apiClientOptions.getUserAgent() != null) {
            LOGGER.info("User agent specified as {}", apiClientOptions.getUserAgent());
        }
        api.setApiClient(ApiUtil.createApiClient(apiClientOptions));

        try {
            ResponseBankingProductList response = api.listProducts(brand, effective, page, pageSize, productCategory, updatedSince);

            if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
                LOGGER.info("Payload validation is enabled");
                okhttp3.Call call = api.listProductsCall(brand, effective, page, pageSize, productCategory, updatedSince, null);
                List<ConformanceError> conformanceErrors = payloadValidator
                        .validateResponse(call.request().url().toString(), response, "listProducts", ResponseCode.OK);
                if (conformanceErrors.isEmpty()) {
                    LOGGER.info(JsonPrinter.toJson(response));
                } else {
                    logConformanceErrors(conformanceErrors);
                }
            }
        } catch (Exception e) {
            LOGGER.error("Encountered error while performing listProducts: {}", e.getMessage());
            throw e;
        }
    }

    @ShellMethod("Get Product Detail")
    public void getProductDetail(@ShellOption(defaultValue = ShellOption.NULL) Boolean check,
                                 @ShellOption(defaultValue = ShellOption.NULL) String productId) throws Exception {

        LOGGER.info("Get Product Detail CLI initiated with product id {}", productId);
        api.setApiClient(ApiUtil.createApiClient(apiClientOptions));

        try {
            ResponseBankingProductById response = api.getProductDetail(productId);
            if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
                LOGGER.debug("Conformance verification is enabled, initiating conformance check on payload");
                okhttp3.Call call = api.getProductDetailCall(productId, null);
                List<ConformanceError> conformanceErrors = payloadValidator.validateResponse(
                        call.request().url().toString(), response, "getProductDetail", ResponseCode.OK);
                if (conformanceErrors.isEmpty()) {
                    LOGGER.info(JsonPrinter.toJson(response));
                } else {
                    logConformanceErrors(conformanceErrors);
                }
            } else {
                LOGGER.info(JsonPrinter.toJson(response));
            }
        } catch (Exception e) {
            LOGGER.error("Encountered error while performing getProductDetail: {}", e.getMessage());
            throw e;
        }
    }
}
