/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the cds-codegen package
 * https://github.com/ConsumerDataStandardsAustralia/cds-codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;
import java.util.List;
import java.math.BigDecimal;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** BankingProductLendingRate */
public class BankingProductLendingRate {
  // The type of rate (fixed, variable, etc). See the next
  // section for an overview of valid values and their meaning
  @SerializedName("lendingRateType")
  private LendingRateType lendingRateType;
  // The rate to be applied
  @SerializedName("rate")
  private BigDecimal rate;
  // A comparison rate equivalent for this rate
  @SerializedName("comparisonRate")
  private BigDecimal comparisonRate;
  // The period after which the rate is applied to the balance to
  // calculate the amount due for the period. Calculation of the
  // amount is often daily (as balances may change) but
  // accumulated until the total amount is 'applied' to the
  // account (see applicationFrequency). Formatted according to
  // [ISO 8601
  // Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
  @SerializedName("calculationFrequency")
  private String calculationFrequency;
  // The period after which the calculated amount(s) (see
  // calculationFrequency) are 'applied' (i.e. debited or
  // credited) to the account. Formatted according to [ISO 8601
  // Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
  @SerializedName("applicationFrequency")
  private String applicationFrequency;
  // When loan payments are due to be paid within each period.
  // The investment benefit of earlier payments affect the rate
  // that can be offered
  @SerializedName("interestPaymentDue")
  private InterestPaymentDue interestPaymentDue;
  // Rate tiers applicable for this rate
  @SerializedName("tiers")
  private List<BankingProductRateTier> tiers;
  // Generic field containing additional information relevant to
  // the lendingRateType specified. Whether mandatory or not is
  // dependent on the value of lendingRateType
  @SerializedName("additionalValue")
  private String additionalValue;
  // Display text providing more information on the rate.
  @SerializedName("additionalInfo")
  private String additionalInfo;
  // Link to a web page with more information on this rate
  @SerializedName("additionalInfoUri")
  private String additionalInfoUri;

  public LendingRateType getLendingRateType() {
    return lendingRateType;
  }

  public void setLendingRateType(LendingRateType lendingRateType) {
    this.lendingRateType = lendingRateType;
  }

  public BankingProductLendingRate lendingRateType(LendingRateType lendingRateType) {
    this.lendingRateType = lendingRateType;
    return this;
  }

  public BigDecimal getRate() {
    return rate;
  }

  public void setRate(BigDecimal rate) {
    this.rate = rate;
  }

  public BankingProductLendingRate rate(BigDecimal rate) {
    this.rate = rate;
    return this;
  }

  public BigDecimal getComparisonRate() {
    return comparisonRate;
  }

  public void setComparisonRate(BigDecimal comparisonRate) {
    this.comparisonRate = comparisonRate;
  }

  public BankingProductLendingRate comparisonRate(BigDecimal comparisonRate) {
    this.comparisonRate = comparisonRate;
    return this;
  }

  public String getCalculationFrequency() {
    return calculationFrequency;
  }

  public void setCalculationFrequency(String calculationFrequency) {
    this.calculationFrequency = calculationFrequency;
  }

  public BankingProductLendingRate calculationFrequency(String calculationFrequency) {
    this.calculationFrequency = calculationFrequency;
    return this;
  }

  public String getApplicationFrequency() {
    return applicationFrequency;
  }

  public void setApplicationFrequency(String applicationFrequency) {
    this.applicationFrequency = applicationFrequency;
  }

  public BankingProductLendingRate applicationFrequency(String applicationFrequency) {
    this.applicationFrequency = applicationFrequency;
    return this;
  }

  public InterestPaymentDue getInterestPaymentDue() {
    return interestPaymentDue;
  }

  public void setInterestPaymentDue(InterestPaymentDue interestPaymentDue) {
    this.interestPaymentDue = interestPaymentDue;
  }

  public BankingProductLendingRate interestPaymentDue(InterestPaymentDue interestPaymentDue) {
    this.interestPaymentDue = interestPaymentDue;
    return this;
  }

  public List<BankingProductRateTier> getTiers() {
    return tiers;
  }

  public void setTiers(List<BankingProductRateTier> tiers) {
    this.tiers = tiers;
  }

  public BankingProductLendingRate tiers(List<BankingProductRateTier> tiers) {
    this.tiers = tiers;
    return this;
  }

  public String getAdditionalValue() {
    return additionalValue;
  }

  public void setAdditionalValue(String additionalValue) {
    this.additionalValue = additionalValue;
  }

  public BankingProductLendingRate additionalValue(String additionalValue) {
    this.additionalValue = additionalValue;
    return this;
  }

  public String getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
  }

  public BankingProductLendingRate additionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  public String getAdditionalInfoUri() {
    return additionalInfoUri;
  }

  public void setAdditionalInfoUri(String additionalInfoUri) {
    this.additionalInfoUri = additionalInfoUri;
  }

  public BankingProductLendingRate additionalInfoUri(String additionalInfoUri) {
    this.additionalInfoUri = additionalInfoUri;
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    BankingProductLendingRate inputModel = (BankingProductLendingRate) o;
    if (!(lendingRateType.equals(inputModel.getLendingRateType()))) {
      return false;
    }
    if (!(rate.equals(inputModel.getRate()))) {
      return false;
    }
    if (!(comparisonRate.equals(inputModel.getComparisonRate()))) {
      return false;
    }
    if (!(calculationFrequency.equals(inputModel.getCalculationFrequency()))) {
      return false;
    }
    if (!(applicationFrequency.equals(inputModel.getApplicationFrequency()))) {
      return false;
    }
    if (!(interestPaymentDue.equals(inputModel.getInterestPaymentDue()))) {
      return false;
    }
    if (!(tiers.equals(inputModel.getTiers()))) {
      return false;
    }
    if (!(additionalValue.equals(inputModel.getAdditionalValue()))) {
      return false;
    }
    if (!(additionalInfo.equals(inputModel.getAdditionalInfo()))) {
      return false;
    }
    if (!(additionalInfoUri.equals(inputModel.getAdditionalInfoUri()))) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri,
        additionalInfoUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(String.format("class %s {\n", getClass()));
    sb.append("    lendingRateType: ").append(toIndentedString(lendingRateType)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    comparisonRate: ").append(toIndentedString(comparisonRate)).append("\n");
    sb.append("    calculationFrequency: ")
        .append(toIndentedString(calculationFrequency))
        .append("\n");
    sb.append("    applicationFrequency: ")
        .append(toIndentedString(applicationFrequency))
        .append("\n");
    sb.append("    interestPaymentDue: ").append(toIndentedString(interestPaymentDue)).append("\n");
    sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
    sb.append("    additionalValue: ").append(toIndentedString(additionalValue)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    additionalInfoUri: ").append(toIndentedString(additionalInfoUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /** InterestPaymentDue */
  @JsonAdapter(InterestPaymentDue.Adapter.class)
  public enum InterestPaymentDue {
    ARREARS("ARREARS"),
    ADVANCE("ADVANCE");

    private String value;

    InterestPaymentDue(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public String getValue() {
      return value;
    }

    public static InterestPaymentDue fromValue(String value) {
      for (InterestPaymentDue b : InterestPaymentDue.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterestPaymentDue> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterestPaymentDue enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterestPaymentDue read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InterestPaymentDue.fromValue(value);
      }
    }
  }

  /** LendingRateType */
  @JsonAdapter(LendingRateType.Adapter.class)
  public enum LendingRateType {
    FIXED("FIXED"),
    VARIABLE("VARIABLE"),
    INTRODUCTORY("INTRODUCTORY"),
    DISCOUNT("DISCOUNT"),
    PENALTY("PENALTY"),
    FLOATING("FLOATING"),
    MARKET_LINKED("MARKET_LINKED"),
    CASH_ADVANCE("CASH_ADVANCE"),
    PURCHASE("PURCHASE"),
    BUNDLE_DISCOUNT_FIXED("BUNDLE_DISCOUNT_FIXED"),
    BUNDLE_DISCOUNT_VARIABLE("BUNDLE_DISCOUNT_VARIABLE");

    private String value;

    LendingRateType(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public String getValue() {
      return value;
    }

    public static LendingRateType fromValue(String value) {
      for (LendingRateType b : LendingRateType.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LendingRateType> {
      @Override
      public void write(final JsonWriter jsonWriter, final LendingRateType enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LendingRateType read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LendingRateType.fromValue(value);
      }
    }
  }
}
